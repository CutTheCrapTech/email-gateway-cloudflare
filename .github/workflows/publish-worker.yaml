# .github/workflows/publish-worker.yml
name: Deploy Workers

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: false
        default: "production"
        type: choice
        options:
          - production
          - staging
          - development
      package_filter:
        description: "Package name filter (e.g., 'my-worker')"
        required: false
        default: ""
        type: string
      force_deploy:
        description: "Force deploy even if no changes detected"
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      published_packages:
        description: "JSON array of published packages"
        required: false
        default: ""
        type: string
      environment:
        description: "Deployment environment"
        required: false
        default: "production"
        type: string

jobs:
  deploy-workers:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment: ${{ inputs.environment || 'production' }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 #v4
        with:
          # Use the latest Long-Term Support version of Node.js
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run comprehensive CI checks
        run: pnpm run ci

      - name: Determine packages to deploy
        id: packages
        run: |
          if [ "${{ github.event.inputs.force_deploy }}" == "true" ]; then
            echo "Force deploy mode - finding all worker packages"
            # Find all packages with "worker" in name
            PACKAGES=$(find packages -name "package.json" -exec grep -l "worker" {} \; | xargs -I {} dirname {} | xargs -I {} basename {})
            echo "packages<<EOF" >> $GITHUB_OUTPUT
            echo "$PACKAGES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "has_packages=true" >> $GITHUB_OUTPUT
          elif [ -n "${{ inputs.published_packages }}" ]; then
            echo "Using provided published packages"
            PACKAGES=$(echo "${{ inputs.published_packages }}" | grep -E ".*worker.*" || echo "")
            if [ -n "$PACKAGES" ]; then
              echo "packages<<EOF" >> $GITHUB_OUTPUT
              echo "$PACKAGES" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "has_packages=true" >> $GITHUB_OUTPUT
            else
              echo "has_packages=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Detecting changes from changesets"
            PACKAGES=$(npx changeset status --output=json | jq -r '.releases[] | select(.type != "none" and (.name | contains("worker"))) | "\(.name)@\(.newVersion)"')
            if [ -n "$PACKAGES" ]; then
              echo "packages<<EOF" >> $GITHUB_OUTPUT
              echo "$PACKAGES" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "has_packages=true" >> $GITHUB_OUTPUT
            else
              echo "has_packages=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Deploy workers
        if: steps.packages.outputs.has_packages == 'true'
        run: |
          echo "Deploying Cloudflare Workers to ${{ inputs.environment || 'production' }}..."
          echo "${{ steps.packages.outputs.packages }}" | while read -r package; do
            if [ -z "$package" ]; then continue; fi

            if [[ "$package" == *"@"* ]]; then
              name=$(echo "$package" | cut -d'@' -f1)
              version=$(echo "$package" | cut -d'@' -f2)
            else
              name="$package"
              version="latest"
            fi

            # Apply package filter if specified
            if [ -n "${{ github.event.inputs.package_filter }}" ] && [[ "$name" != *"${{ github.event.inputs.package_filter }}"* ]]; then
              echo "Skipping $name (doesn't match filter)"
              continue
            fi

            echo "Deploying worker: $name v$version to ${{ inputs.environment || 'production' }}"
            # TODO: Add your worker deployment logic here
            # npm run deploy --workspace="$name" --if-present
          done
          echo "Worker deployment completed"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
