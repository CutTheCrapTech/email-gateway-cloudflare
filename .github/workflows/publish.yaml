# .github/workflows/publish.yml
name: Publish Packages

on:
  workflow_dispatch:
    inputs:
      create_releases:
        description: "Create GitHub releases"
        required: false
        default: true
        type: boolean
      publish_npm:
        description: "Publish to npm"
        required: false
        default: true
        type: boolean
      publish_extensions:
        description: "Publish browser extensions"
        required: false
        default: false
        type: boolean
      publish_worker:
        description: "Deploy Cloudflare Worker"
        required: false
        default: false
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write # for github releases and uploading assets
      id-token: write # to enable use of OIDC for npm provenance
    outputs:
      published_packages: ${{ steps.changesets.outputs.publishedPackages }}
      has_changes: ${{ steps.changesets.outputs.published }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: "Publish to npm and create GitHub releases"
        id: changesets
        if: github.event.inputs.publish_npm == 'true' || github.event.inputs.create_releases == 'true'
        uses: changesets/action@e0145edc7d9d8679003495b11f87bd8ef63c0cba # v1.5.3
        with:
          publish: pnpm run publish
          createGithubReleases: ${{ github.event.inputs.create_releases }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: "Find and upload release assets"
        if: steps.changesets.outputs.published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -c '.[]' | while read -r package; do
            PACKAGE_NAME=$(echo "$package" | jq -r .name)
            PACKAGE_VERSION=$(echo "$package" | jq -r .version)
            TAG_NAME="${PACKAGE_NAME}@${PACKAGE_VERSION}"

            echo "--- Processing package: ${PACKAGE_NAME} version ${PACKAGE_VERSION} ---"

            PACKAGE_DIR=""
            for dir in packages/*/; do
              if [ -f "${dir}package.json" ]; then
                name=$(jq -r .name "${dir}package.json")
                if [ "$name" == "$PACKAGE_NAME" ]; then
                  PACKAGE_DIR=$dir
                  break
                fi
              fi
            done

            if [ -z "$PACKAGE_DIR" ]; then
              echo "Could not find directory for package ${PACKAGE_NAME}. Skipping asset upload."
              continue
            fi

            if [ ! -d "${PACKAGE_DIR}dist" ]; then
              echo "'dist' directory not found in ${PACKAGE_DIR}. No assets to upload."
              continue
            fi

            ASSET_NAME="dist.zip"
            (cd "${PACKAGE_DIR}" && zip -r "../../${ASSET_NAME}" ./dist && cd -)

            echo "Created asset: ${ASSET_NAME}. Uploading to release with tag ${TAG_NAME}..."

            gh release upload "$TAG_NAME" "$ASSET_NAME" --clobber

            echo "Successfully uploaded ${ASSET_NAME}."

            rm "$ASSET_NAME"
            echo "Cleaned up asset file."
            echo ""
          done

  publish-extensions:
    needs: publish
    if: github.event.inputs.publish_extensions == 'true' && needs.publish.outputs.has_changes == 'true'
    permissions:
      contents: read
    uses: ./.github/workflows/publish-extensions.yaml
    with:
      published_packages: ${{ needs.publish.outputs.published_packages }}
    secrets:
      CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
      CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
      CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
      FIREFOX_API_KEY: ${{ secrets.FIREFOX_API_KEY }}
      FIREFOX_API_SECRET: ${{ secrets.FIREFOX_API_SECRET }}

  deploy-workers:
    needs: publish
    if: github.event.inputs.publish_worker == 'true' && needs.publish.outputs.has_changes == 'true'
    permissions:
      contents: read
    uses: ./.github/workflows/publish-worker.yaml
    with:
      published_packages: ${{ needs.publish.outputs.published_packages }}
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
